import time, json, collections
import spidev
import RPi.GPIO as GPIO
import paho.mqtt.publish as publish

MQTT_HOST  = 'mqtt.beia-telemetrie.ro'
MQTT_PORT  = 1883
MQTT_TOPIC = 'training/device/darius-automatizare'
PUBLISH_EVERY_SEC = 10

SPI_BUS = 0
SPI_DEV = 0
CHANNEL = 0
VREF = 3.3
N_SMOOTH = 5
buf = collections.deque(maxlen=N_SMOOTH)

DRY_RAW = 3300
WET_RAW = 1120

def read_mcp3208(ch):
    resp = spi.xfer2([0x06 | (ch >> 2), (ch & 0x3) << 6, 0x00])
    return ((resp[1] & 0x0F) << 8) | resp[2]

def to_percent(raw):
    if DRY_RAW == WET_RAW:
        return None
    if DRY_RAW > WET_RAW:
        pct = 100.0 * (DRY_RAW - raw) / float(DRY_RAW - WET_RAW)
    else:
        pct = 100.0 * (raw - DRY_RAW) / float(WET_RAW - DRY_RAW)
    pct = max(0, min(100, pct))
    return int(round(pct))

THRESHOLD_PCT    = 35
HYSTERESIS_PCT   = 5
MIN_PUMP_ON_SEC  = 10
COOLDOWN_SEC     = 30

BTN_PIN   = 17
RELAY_PIN = 5
RELAY_ACTIVE_LOW = True
DEBOUNCE_SLEEP = 0.05

spi = spidev.SpiDev()
spi.open(SPI_BUS, SPI_DEV)
spi.max_speed_hz = 1350000
spi.mode = 0

GPIO.setmode(GPIO.BCM)
GPIO.setup(BTN_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(RELAY_PIN, GPIO.OUT)

def relay_set(on):
    if RELAY_ACTIVE_LOW:
        GPIO.output(RELAY_PIN, GPIO.LOW if on else GPIO.HIGH)
    else:
        GPIO.output(RELAY_PIN, GPIO.HIGH if on else GPIO.LOW)

last_btn = GPIO.input(BTN_PIN)
auto_mode = False
pumping = False
pump_on_start = 0.0
last_pump_time = 0.0
relay_set(False)

try:
    last_pub = 0.0
    while True:
        val = GPIO.input(BTN_PIN)
        if last_btn == GPIO.HIGH and val == GPIO.LOW:
            auto_mode = not auto_mode
            if not auto_mode and pumping:
                relay_set(False); pumping = False
        last_btn = val

        raw = read_mcp3208(CHANNEL)
        buf.append(raw)
        raw_avg = sum(buf) / float(len(buf))
        pct = to_percent(raw_avg)
        now = time.time()

        if auto_mode and pct is not None:
            if not pumping:
                if pct < THRESHOLD_PCT and (now - last_pump_time) >= COOLDOWN_SEC:
                    relay_set(True)
                    pumping = True
                    pump_on_start = now
            else:
                if (now - pump_on_start) >= MIN_PUMP_ON_SEC and pct >= (THRESHOLD_PCT + HYSTERESIS_PCT):
                    relay_set(False)
                    pumping = False
                    last_pump_time = now
        elif not auto_mode and pumping:
            relay_set(False); pumping = False

        if now - last_pub >= PUBLISH_EVERY_SEC:
            last_pub = now
            payload = {"moisture": pct, "button_state": auto_mode}
            try:
                publish.single(MQTT_TOPIC, qos=1, hostname=MQTT_HOST, port=MQTT_PORT,
                               payload=json.dumps(payload), retain=False)
            except Exception as e:
                print("MQTT error:", e)

        time.sleep(DEBOUNCE_SLEEP)

except KeyboardInterrupt:
    pass
finally:
    try:
        relay_set(False)
    except Exception:
        pass
    spi.close()
    GPIO.cleanup()

